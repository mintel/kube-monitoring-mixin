{
   "__inputs": [ ],
   "__requires": [ ],
   "annotations": {
      "list": [ ]
   },
   "description": "Provides an analysis of costs by cluster",
   "editable": "false",
   "gnetId": null,
   "graphTooltip": 0,
   "hideControls": false,
   "id": null,
   "links": [ ],
   "panels": [
      {
         "content": "This dashboard shows indicative monthly costing for the cluster, based on current requests for CPU, RAM and Storage.\nCurrent Region Prices are for BELGIUM .\n  Utilisation figures represent utilsation of current, active deployments vs\ntheir request limits, and does not include data from instances no longer running.\n",
         "datasource": null,
         "gridPos": {
            "h": 2,
            "w": 24,
            "x": 0,
            "y": 0
         },
         "id": 2,
         "mode": "markdown",
         "title": "",
         "transparent": true,
         "type": "text"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
         ],
         "datasource": null,
         "description": "This gauge shows the current CPU use vs CPU available",
         "format": "percent",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 3,
            "x": 0,
            "y": 0
         },
         "height": 200,
         "id": 3,
         "interval": "",
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "sum (rate (container_cpu_usage_seconds_total{id!=\"/\",service=\"kubelet\"}[1m])) / sum (machine_cpu_cores{service=\"kubelet\"}) * 100\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "30, 80",
         "title": "CPU Utilisation",
         "transparent": true,
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "avg"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
         ],
         "datasource": null,
         "description": "This panel shows current CPU reservation requests by applications, vs CPU available",
         "format": "percent",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 3,
            "x": 3,
            "y": 0
         },
         "height": 200,
         "id": 4,
         "interval": "",
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "(sum(kube_pod_container_resource_requests_cpu_cores) / sum (kube_node_status_allocatable_cpu_cores)) * 100\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "30, 80",
         "title": "CPU Requests",
         "transparent": true,
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "avg"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
         ],
         "datasource": "$ds",
         "format": "currencyUSD",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 4,
            "x": 6,
            "y": 0
         },
         "height": 200,
         "id": 5,
         "interval": null,
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "sum(((sum(kube_node_status_capacity_cpu_cores) by (node)\n  * on (node) group_left (label_cloud_google_com_gke_preemptible) kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"})\n  * $costpcpu) or ((sum(kube_node_status_capacity_cpu_cores) by (node)\n  * on (node) group_left (label_cloud_google_com_gke_preemptible) kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"})\n  * ($costcpu - ($costcpu / 100 * $costDiscount))))\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "",
         "title": "CPU Cost",
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "current"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
         ],
         "datasource": "$ds",
         "format": "currencyUSD",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 4,
            "x": 10,
            "y": 0
         },
         "height": 200,
         "id": 6,
         "interval": null,
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "sum(sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"})\n  by (persistentvolumeclaim, namespace, storageclass) + on (persistentvolumeclaim, namespace)\n  group_right(storageclass) sum(kube_persistentvolumeclaim_resource_requests_storage_bytes)\n  by (persistentvolumeclaim, namespace)) / 1024 / 1024 / 1024 * $costStorageSSD\n  + (sum (sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*|fast\"})\n  by (persistentvolumeclaim, namespace, storageclass) + on (persistentvolumeclaim, namespace)\n  group_right(storageclass) sum(kube_persistentvolumeclaim_resource_requests_storage_bytes)\n  by (persistentvolumeclaim, namespace)) / 1024 / 1024 / 1024 or on() vector(0) )* $costStorageStandard\n  + sum(container_fs_limit_bytes{device=~\"^/dev/[sv]d[a-z][1-9]$\",id!=\"/\"}) / 1024 / 1024 / 1024 * $costStorageSSD\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "",
         "title": "Storage Cost (Cluster and PVC)",
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "current"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
         ],
         "datasource": null,
         "description": "This gauge shows current RAM use by RAM available",
         "format": "percent",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 3,
            "x": 0,
            "y": 4
         },
         "height": 200,
         "id": 7,
         "interval": "",
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "sum (container_memory_working_set_bytes{id!=\"/\",service=\"kubelet\"}) / sum (machine_memory_bytes{service=\"kubelet\"}) * 100\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "30, 80",
         "title": "RAM Utilisation",
         "transparent": true,
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "avg"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(50, 172, 45, 0.97)",
            "#c15c17"
         ],
         "datasource": null,
         "description": "This panel shows current RAM reservation requests by applications, vs RAM available",
         "format": "percent",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": true,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 3,
            "x": 3,
            "y": 4
         },
         "height": 200,
         "id": 8,
         "interval": "",
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "(\n  sum(kube_pod_container_resource_requests_memory_bytes)\n  /\n  sum(kube_node_status_allocatable_memory_bytes)\n) * 100\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "30, 80",
         "title": "RAM Requests",
         "transparent": true,
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "avg"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
         ],
         "datasource": "$ds",
         "format": "currencyUSD",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 4,
            "x": 6,
            "y": 4
         },
         "height": 200,
         "id": 9,
         "interval": null,
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "sum(((\n       sum(kube_node_status_capacity_memory_bytes) by (node)\n        * on (node) group_left (label_cloud_google_com_gke_preemptible)\n       kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}\n     ) /1024/1024/1024 * $costpram)\n   or\n   ((\n       sum(kube_node_status_capacity_memory_bytes) by (node)\n        * on (node) group_left (label_cloud_google_com_gke_preemptible)\n       kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}\n     ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))))\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "",
         "title": "RAM Cost",
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "current"
      },
      {
         "cacheTimeout": null,
         "colorBackground": false,
         "colorValue": false,
         "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
         ],
         "datasource": "$ds",
         "format": "currencyUSD",
         "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
         },
         "gridPos": {
            "h": 4,
            "w": 4,
            "x": 10,
            "y": 4
         },
         "height": 200,
         "id": 10,
         "interval": null,
         "links": [ ],
         "mappingType": 1,
         "mappingTypes": [
            {
               "name": "value to text",
               "value": 1
            },
            {
               "name": "range to text",
               "value": 2
            }
         ],
         "maxDataPoints": 100,
         "nullPointMode": "connected",
         "nullText": null,
         "postfix": null,
         "postfixFontSize": "50%",
         "prefix": "",
         "prefixFontSize": "50%",
         "rangeMaps": [
            {
               "from": "null",
               "text": "N/A",
               "to": "null"
            }
         ],
         "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": true
         },
         "tableColumn": "",
         "targets": [
            {
               "expr": "# CPU\nsum(((sum(kube_node_status_capacity_cpu_cores) by (node) * on (node) group_left (label_cloud_google_com_gke_preemptible)\nkube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}) * $costpcpu)\nor ((sum(kube_node_status_capacity_cpu_cores) by (node) * on (node) group_left (label_cloud_google_com_gke_preemptible)\nkube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}) * ($costcpu - ($costcpu / 100 * $costDiscount))))\n+\n# Storage\nsum (\nsum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n+ on (persistentvolumeclaim, namespace) group_right(storageclass)\nsum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) / 1024 / 1024 /1024 * $costStorageSSD\n+\n(sum (\nsum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n+ on (persistentvolumeclaim, namespace) group_right(storageclass)\nsum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) or on() vector(0)) / 1024 / 1024 /1024 * $costStorageStandard\n+\nsum(container_fs_limit_bytes{device=~\"^/dev/[sv]d[a-z][1-9]$\",id!=\"/\"}) / 1024 / 1024 / 1024 * $costStorageSSD\n+\n# RAM\nsum(((\n    sum(kube_node_status_capacity_memory_bytes) by (node)\n     * on (node) group_left (label_cloud_google_com_gke_preemptible)\n    kube_node_labels{label_cloud_google_com_gke_preemptible=\"true\"}) /1024/1024/1024 * $costpram\n)\nor\n((\n    sum(kube_node_status_capacity_memory_bytes) by (node)\n     * on (node) group_left (label_cloud_google_com_gke_preemptible)\n    kube_node_labels{label_cloud_google_com_gke_preemptible!=\"true\"}\n  ) /1024/1024/1024 * ($costram - ($costram / 100 * $costDiscount))\n))\n",
               "format": true,
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "thresholds": "",
         "title": "Total Cost",
         "type": "singlestat",
         "valueFontSize": "80%",
         "valueMaps": [
            {
               "op": "=",
               "text": "N/A",
               "value": "null"
            }
         ],
         "valueName": "current"
      },
      {
         "columns": [
            {
               "expr": "(sum(kube_pod_container_resource_requests_memory_bytes) by (node) / sum(kube_node_status_allocatable_memory_bytes) by (node)) * 100",
               "format": "table",
               "hide": false,
               "instant": true,
               "interval": "",
               "intervalFactor": 1,
               "legendFormat": "{{ node }}",
               "refId": "A"
            },
            {
               "expr": "(sum(kube_pod_container_resource_requests_cpu_cores) by (node) / sum(kube_node_status_allocatable_cpu_cores) by (node)) * 100",
               "format": "table",
               "instant": true,
               "intervalFactor": 1,
               "legendFormat": "{{ node }}",
               "refId": "B"
            }
         ],
         "datasource": "$ds",
         "description": "This table shows the comparison of CPU and RAM requests by applications, vs the capacity of the node",
         "gridPos": {
            "h": 8,
            "w": 10,
            "x": 14,
            "y": 0
         },
         "id": 11,
         "styles": [
            {
               "alias": "RAM Requests",
               "align": "auto",
               "colorMode": "value",
               "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "#ef843c",
                  "rgba(245, 54, 54, 0.9) "
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #A",
               "thresholds": [
                  "50",
                  " 80"
               ],
               "type": "number",
               "unit": "percent"
            },
            {
               "alias": "Node",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "node",
               "thresholds": [ ],
               "type": "string",
               "unit": "short"
            },
            {
               "alias": "",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Time",
               "thresholds": [ ],
               "type": "hidden",
               "unit": "short"
            },
            {
               "alias": "CPU Requests",
               "align": "auto",
               "colorMode": "value",
               "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "#ef843c",
                  "rgba(245, 54, 54, 0.9)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #B",
               "thresholds": [
                  "50",
                  " 80"
               ],
               "type": "number",
               "unit": "percent"
            }
         ],
         "targets": [
            {
               "expr": [
                  {
                     "expr": "(sum(kube_pod_container_resource_requests_memory_bytes) by (node) / sum(kube_node_status_allocatable_memory_bytes) by (node)) * 100",
                     "format": "table",
                     "hide": false,
                     "instant": true,
                     "interval": "",
                     "intervalFactor": 1,
                     "legendFormat": "{{ node }}",
                     "refId": "A"
                  },
                  {
                     "expr": "(sum(kube_pod_container_resource_requests_cpu_cores) by (node) / sum(kube_node_status_allocatable_cpu_cores) by (node)) * 100",
                     "format": "table",
                     "instant": true,
                     "intervalFactor": 1,
                     "legendFormat": "{{ node }}",
                     "refId": "B"
                  }
               ],
               "format": "time_series",
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "timeFrom": null,
         "timeShift": null,
         "title": "Cluster Node Utilisation by CPU and RAM requests",
         "type": "table"
      },
      {
         "columns": [
            {
               "expr": "(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_cpu_cores:sum) * ($costcpu - ($costcpu / 100 * $costDiscount)) \n)\n\n+\n\n(\n  sum(container_spec_cpu_shares{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1000*$costpcpu) by(namespace)\n  or\n  count(\n    count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n  ) by(namespace) -1\n)",
               "format": "table",
               "hide": false,
               "instant": true,
               "interval": "",
               "intervalFactor": 1,
               "legendFormat": "{{ namespace }}",
               "refId": "A"
            },
            {
               "expr": "(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_memory_bytes:sum)/1024/1024/1024*($costram- ($costram / 100 * $costDiscount))\n)\n\n+\n\n(\n  sum(container_spec_memory_limit_bytes{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1024/1024/1024*$costpram) by(namespace)\n  or\n  count(\n    count(container_spec_memory_limit_bytes{namespace!=\"\"}) by(namespace)\n  ) by(namespace) -1\n)",
               "format": "table",
               "instant": true,
               "intervalFactor": 1,
               "legendFormat": "{{ namespace }}",
               "refId": "B"
            },
            {
               "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD\nor sum (\n    sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard\nor\n    count(\n      count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n    ) by(namespace) -1",
               "format": "table",
               "instant": true,
               "intervalFactor": 1,
               "legendFormat": "{{ namespace }}",
               "refId": "C"
            },
            {
               "expr": "# Add the CPU\n(\n(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_cpu_cores:sum) * ($costcpu - ($costcpu / 100 * $costDiscount)) \n)\n  \n  +\n  \n  (\n    sum(container_spec_cpu_shares{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1000*$costpcpu) by(namespace)\n    or\n    count(\n      count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n    ) by(namespace) -1\n  )\n)\n\n+ \n# Add the RAM\n(\n(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_memory_bytes:sum)/1024/1024/1024*($costram- ($costram / 100 * $costDiscount))\n)\n\n  \n  +\n  \n  (\n    sum(container_spec_memory_limit_bytes{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1024/1024/1024*$costpram) by(namespace)\n    or\n    count(\n      count(container_spec_memory_limit_bytes{namespace!=\"\"}) by(namespace)\n    ) by(namespace) -1\n  )\n)\n\n+\n# Add the storage\n(\n\n  sum (\n    sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n  ) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD\n  \n  or\n  \n  sum (\n    sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n  ) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard\n  \n  or\n  \n  count(\n    count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n  ) by(namespace) -1\n\n)",
               "format": "table",
               "instant": true,
               "intervalFactor": 1,
               "refId": "D"
            },
            {
               "expr": "( sum by (namespace) (rate(container_cpu_usage_seconds_total{container_name!=\"\",image!=\"\",service=\"kubelet\"}[1m]))  /  ignoring(namespace) group_left() (sum (kube_node_status_allocatable_cpu_cores)) ) * 100",
               "format": "table",
               "instant": true,
               "intervalFactor": 1,
               "legendFormat": "{{ namespace }}",
               "refId": "E"
            },
            {
               "expr": "sum(\n   count(count(container_memory_working_set_bytes{namespace!=\"\"}) by (pod_name, namespace)) by (pod_name, namespace)  \n   * on (pod_name, namespace) \n   sum(avg_over_time(container_memory_working_set_bytes{namespace!=\"\"}[1m])) by (pod_name, namespace)\n) by (namespace)\n/\nsum(container_spec_memory_limit_bytes{namespace!=\"\"}) by (namespace) * 100\n",
               "format": "table",
               "instant": true,
               "intervalFactor": 1,
               "legendFormat": "{{ namespace }}",
               "refId": "F"
            }
         ],
         "datasource": "$ds",
         "description": "",
         "gridPos": {
            "h": 11,
            "w": 11,
            "x": 0,
            "y": 8
         },
         "id": 12,
         "styles": [
            {
               "alias": "Namespace",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(50, 172, 45, 0.97)",
                  "#c15c17"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "link": true,
               "linkTooltip": "View namespace cost analysis",
               "linkUrl": "d/at-cost-analysis-namespace/cost-analysis-by-namespace?&var-namespace=$__cell",
               "pattern": "namespace",
               "thresholds": [
                  "30",
                  "80"
               ],
               "type": "string",
               "unit": "currencyUSD"
            },
            {
               "alias": "RAM",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "pattern": "Value #B",
               "thresholds": [ ],
               "type": "number",
               "unit": "currencyUSD"
            },
            {
               "alias": "CPU",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #A",
               "thresholds": [ ],
               "type": "number",
               "unit": "currencyUSD"
            },
            {
               "alias": "",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Time",
               "thresholds": [ ],
               "type": "hidden",
               "unit": "short"
            },
            {
               "alias": "Storage",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #C",
               "thresholds": [ ],
               "type": "number",
               "unit": "currencyUSD"
            },
            {
               "alias": "Total",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #D",
               "thresholds": [ ],
               "type": "number",
               "unit": "currencyUSD"
            },
            {
               "alias": "CPU Utilisation",
               "align": "auto",
               "colorMode": "value",
               "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "#ef843c",
                  "#bf1b00"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #E",
               "thresholds": [
                  "30",
                  "80"
               ],
               "type": "number",
               "unit": "percent"
            },
            {
               "alias": "RAM Utilisation",
               "align": "auto",
               "colorMode": "value",
               "colors": [
                  "rgba(50, 172, 45, 0.97)",
                  "#ef843c ",
                  "rgba(245, 54, 54, 0.9) "
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value #F",
               "thresholds": [
                  "30",
                  "80"
               ],
               "type": "number",
               "unit": "percent"
            }
         ],
         "targets": [
            {
               "expr": [
                  {
                     "expr": "(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_cpu_cores:sum) * ($costcpu - ($costcpu / 100 * $costDiscount)) \n)\n\n+\n\n(\n  sum(container_spec_cpu_shares{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1000*$costpcpu) by(namespace)\n  or\n  count(\n    count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n  ) by(namespace) -1\n)",
                     "format": "table",
                     "hide": false,
                     "instant": true,
                     "interval": "",
                     "intervalFactor": 1,
                     "legendFormat": "{{ namespace }}",
                     "refId": "A"
                  },
                  {
                     "expr": "(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_memory_bytes:sum)/1024/1024/1024*($costram- ($costram / 100 * $costDiscount))\n)\n\n+\n\n(\n  sum(container_spec_memory_limit_bytes{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1024/1024/1024*$costpram) by(namespace)\n  or\n  count(\n    count(container_spec_memory_limit_bytes{namespace!=\"\"}) by(namespace)\n  ) by(namespace) -1\n)",
                     "format": "table",
                     "instant": true,
                     "intervalFactor": 1,
                     "legendFormat": "{{ namespace }}",
                     "refId": "B"
                  },
                  {
                     "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD\nor sum (\n    sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard\nor\n    count(\n      count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n    ) by(namespace) -1",
                     "format": "table",
                     "instant": true,
                     "intervalFactor": 1,
                     "legendFormat": "{{ namespace }}",
                     "refId": "C"
                  },
                  {
                     "expr": "# Add the CPU\n(\n(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_cpu_cores:sum) * ($costcpu - ($costcpu / 100 * $costDiscount)) \n)\n  \n  +\n  \n  (\n    sum(container_spec_cpu_shares{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1000*$costpcpu) by(namespace)\n    or\n    count(\n      count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n    ) by(namespace) -1\n  )\n)\n\n+ \n# Add the RAM\n(\n(\n  sum by (namespace) (namespace_name:kube_pod_container_resource_requests_memory_bytes:sum)/1024/1024/1024*($costram- ($costram / 100 * $costDiscount))\n)\n\n  \n  +\n  \n  (\n    sum(container_spec_memory_limit_bytes{namespace!=\"\",cloud_google_com_gke_preemptible=\"true\"}/1024/1024/1024*$costpram) by(namespace)\n    or\n    count(\n      count(container_spec_memory_limit_bytes{namespace!=\"\"}) by(namespace)\n    ) by(namespace) -1\n  )\n)\n\n+\n# Add the storage\n(\n\n  sum (\n    sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n  ) by (namespace) / 1024 / 1024 /1024 * $costStorageSSD\n  \n  or\n  \n  sum (\n    sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n    + on (persistentvolumeclaim, namespace) group_right(storageclass)\n    sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n  ) by (namespace) / 1024 / 1024 /1024 * $costStorageStandard\n  \n  or\n  \n  count(\n    count(container_spec_cpu_shares{namespace!=\"\"}) by(namespace)\n  ) by(namespace) -1\n\n)",
                     "format": "table",
                     "instant": true,
                     "intervalFactor": 1,
                     "refId": "D"
                  },
                  {
                     "expr": "( sum by (namespace) (rate(container_cpu_usage_seconds_total{container_name!=\"\",image!=\"\",service=\"kubelet\"}[1m]))  /  ignoring(namespace) group_left() (sum (kube_node_status_allocatable_cpu_cores)) ) * 100",
                     "format": "table",
                     "instant": true,
                     "intervalFactor": 1,
                     "legendFormat": "{{ namespace }}",
                     "refId": "E"
                  },
                  {
                     "expr": "sum(\n   count(count(container_memory_working_set_bytes{namespace!=\"\"}) by (pod_name, namespace)) by (pod_name, namespace)  \n   * on (pod_name, namespace) \n   sum(avg_over_time(container_memory_working_set_bytes{namespace!=\"\"}[1m])) by (pod_name, namespace)\n) by (namespace)\n/\nsum(container_spec_memory_limit_bytes{namespace!=\"\"}) by (namespace) * 100\n",
                     "format": "table",
                     "instant": true,
                     "intervalFactor": 1,
                     "legendFormat": "{{ namespace }}",
                     "refId": "F"
                  }
               ],
               "format": "time_series",
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "timeFrom": null,
         "timeShift": null,
         "title": "Namespace cost and utilisation analysis",
         "type": "table"
      },
      {
         "columns": [
            {
               "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageSSD\n\nor\n\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageStandard\n",
               "format": "table",
               "hide": false,
               "instant": true,
               "interval": "",
               "intervalFactor": 1,
               "legendFormat": "{{ persistentvolumeclaim }}",
               "refId": "A"
            }
         ],
         "datasource": "$ds",
         "description": "",
         "gridPos": {
            "h": 11,
            "w": 13,
            "x": 11,
            "y": 8
         },
         "id": 13,
         "span": 4,
         "styles": [
            {
               "alias": "Namespace",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "namespace",
               "thresholds": [ ],
               "type": "string",
               "unit": "short"
            },
            {
               "alias": "PVC Name",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "persistentvolumeclaim",
               "thresholds": [ ],
               "type": "number",
               "unit": "short"
            },
            {
               "alias": "Storage Class",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "storageclass",
               "thresholds": [ ],
               "type": "number",
               "unit": "short"
            },
            {
               "alias": "Cost",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Value",
               "thresholds": [ ],
               "type": "number",
               "unit": "currencyUSD"
            },
            {
               "alias": "",
               "align": "auto",
               "colorMode": null,
               "colors": [
                  "rgba(245, 54, 54, 0.9)",
                  "rgba(237, 129, 40, 0.89)",
                  "rgba(50, 172, 45, 0.97)"
               ],
               "dateFormat": "YYYY-MM-DD HH:mm:ss",
               "decimals": 2,
               "mappingType": 1,
               "pattern": "Time",
               "thresholds": [ ],
               "type": "hidden",
               "unit": "short"
            }
         ],
         "targets": [
            {
               "expr": [
                  {
                     "expr": "sum (\n  sum(kube_persistentvolumeclaim_info{storageclass=~\".*ssd.*|fast\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageSSD\n\nor\n\nsum (\n  sum(kube_persistentvolumeclaim_info{storageclass!~\".*ssd.*\"}) by (persistentvolumeclaim, namespace, storageclass)\n  + on (persistentvolumeclaim, namespace) group_right(storageclass)\n  sum(kube_persistentvolumeclaim_resource_requests_storage_bytes) by (persistentvolumeclaim, namespace)\n) by (namespace,persistentvolumeclaim,storageclass) / 1024 / 1024 /1024 * $costStorageStandard\n",
                     "format": "table",
                     "hide": false,
                     "instant": true,
                     "interval": "",
                     "intervalFactor": 1,
                     "legendFormat": "{{ persistentvolumeclaim }}",
                     "refId": "A"
                  }
               ],
               "format": "time_series",
               "interval": "1m",
               "intervalFactor": 3,
               "legendFormat": "",
               "refId": "A"
            }
         ],
         "timeFrom": null,
         "timeShift": null,
         "title": "Persistent Volume Claims",
         "type": "table"
      }
   ],
   "refresh": "",
   "rows": [ ],
   "schemaVersion": 14,
   "style": "dark",
   "tags": [
      "mintel",
      "cost",
      "utilisation",
      "metrics"
   ],
   "templating": {
      "list": [
         {
            "current": {
               "text": "Prometheus",
               "value": "Prometheus"
            },
            "hide": 2,
            "label": null,
            "name": "ds",
            "options": [ ],
            "query": "prometheus",
            "refresh": 1,
            "regex": "",
            "type": "datasource"
         },
         {
            "allValue": null,
            "current": {
               "text": "30",
               "value": "30"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "Disc.",
            "multi": false,
            "name": "costDiscount",
            "options": [ ],
            "query": "30",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         },
         {
            "allValue": null,
            "current": {
               "text": "18.7",
               "value": "18.7"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "CPU",
            "multi": false,
            "name": "costcpu",
            "options": [ ],
            "query": "18.7",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         },
         {
            "allValue": null,
            "current": {
               "text": "5.6",
               "value": "5.6"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "CPU Preemptible",
            "multi": false,
            "name": "costpcpu",
            "options": [ ],
            "query": "5.6",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         },
         {
            "allValue": null,
            "current": {
               "text": "0.170",
               "value": "0.170"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "SSD",
            "multi": false,
            "name": "costStorageSSD",
            "options": [ ],
            "query": "0.170",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         },
         {
            "allValue": null,
            "current": {
               "text": "0.040",
               "value": "0.040"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "Storage",
            "multi": false,
            "name": "costStorageStandard",
            "options": [ ],
            "query": "0.040",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         },
         {
            "allValue": null,
            "current": {
               "text": "3.57",
               "value": "3.57"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "RAM",
            "multi": false,
            "name": "costram",
            "options": [ ],
            "query": "3.57",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         },
         {
            "allValue": null,
            "current": {
               "text": "0.75",
               "value": "0.75"
            },
            "datasource": "Prometheus",
            "hide": 0,
            "includeAll": false,
            "label": "RAM Preemptible",
            "multi": false,
            "name": "costpram",
            "options": [ ],
            "query": "0.75",
            "refresh": 1,
            "regex": "",
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [ ],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
         }
      ]
   },
   "time": {
      "from": "now-1h",
      "to": "now"
   },
   "timepicker": {
      "refresh_intervals": [
         "5s",
         "10s",
         "30s",
         "1m",
         "5m",
         "15m",
         "30m",
         "1h",
         "2h",
         "1d"
      ],
      "time_options": [
         "5m",
         "15m",
         "1h",
         "6h",
         "12h",
         "24h",
         "2d",
         "7d",
         "30d"
      ]
   },
   "timezone": "browser",
   "title": "Mintel /  Cost Analysis by Cluster",
   "uid": "a887345482b1ffc28fb7dbbe325cd30e",
   "version": 0
}
